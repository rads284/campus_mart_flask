Subject,Pdf_Name,Keywords
WT,ajax-performance.pdf,AJAX PERFORMANCE GENERAL NOTES BASED ON CLASSROOM DISCUSSIONS Potential problem AJAX applications Requests 1 Request never returns Why See point 5 Timeouts Solution wait fixed interval aborting request probably trying later point time Implementation Setup timeout function timeout period If response received within timeout cancel function Otherwise function fire anyway timeout interval Otherwise use timeout ontimeout properties XHR object The timeout property takes time milliseconds XHR request deemed timedout The ontimeout property refers function fires request times 2 Request returns slowly See point 5 Detailed solution later parts document 3 Response returns error occurred Server may permission probs b Server overloaded sent back text indicating c Web Server may throw errors Server returns malformed data If multiple requests made order responses important things get complicated What responses arrive order Whole lot bandwidth wasted data makes sense 4 Request made In spite call client The browser plays party crasher See point 5 5 An avalanche requests made client infact clients Server chokes case responses slow timeout b Each client browser decides many queue therefore silently drops requests This 2 connection limit imposed http 1 1 HTTP 1 1 says At point time 2 simultaneous open requests single client particular domain Browsers obey strictly For example firefox chrome limit set 6 Solution The client must decide requests important Also client must queue requests dropped browser We build practical solution Check request manager example class prqueuejs prqueue html reqmanager js reqclient js order responses important still cause prbs We need add additional property called depends JSON request object logic b Use sub domains server c Split resources many servers use Access control allow origin header But server side cost starts going Increase max connections browser side mimic ing fly method traffic control Bangalore In firefox done typing config address bar modifying network http max persistent connections per server field e Send Requests batches This require code pack unpack requests Disadvantages The speed slowest request determines speed batch Other Performance issues 1 If server script encounters error server environments return 200 status So merely checking 200 readyState 4 may enough Also server script times executing maybe got caught accidentally infinite loop 200 returned One simplest ways introducing first level error check check MIME type returned value If expect might want take alternate action Otherwise analyze data little bit make sure ok using completely N Order responses guaranteed Order requests may want server may take varying times order process requests Out order responses may meaningless We need priority based queue Priorities must assigned proper thinking But even cause problem last two requests browser equal priority Hence better assign dependencies requests perform logic order responses received Server side problems 1 Race conditions Example _SESSION php variable Luckily PHP inbuilt session locking mechanism But _SESSION one per web server If one web server used usual thread safe programming must done developer locking etc 2 Server availability Check server actually making request This crucial sending lot data request You want sure server ready take Otherwise waste bandwidth Solution This could done simple HEAD call save bandwidth The server responds heartbeat header part body sent Frequency HEAD call crucial factor 3 Client availability This crucial save resources server For instance server may fetched huge amounts data database kept memory The question How long server keep data memory What browser closed user Or user simply inactive Hence client also let server know alive server keeps data memory Both 2 3 accomplished one request Otherwise server may wasting lot resources Patterns Be careful Periodic Refresh Multi stage downloads predictive fetches With periodic refresh frequency value vital good performance In predictive fetches wrong predictions end fetching lot data may useless later CONTENT OPTIMIZATION Apart saving bandwidth making calls judiciously must also optimize content payload transferred back server Remember Send little less often Http Compression 1 We use compression techniques like gzip deflate text payload significantly reduced 2 The Accept encoding header used client specify whether accept compressed data Most browsers accept gzip deflate 3 Markup CSS JS Optimization This also make code unreadable atleast start discourage potential copy masters Mark Remove indentation unnecessary comments Remap color values appropriately Big words use hex codes small words retained Be careful removing quotes around attributes short closing tags dangerous script textarea b CSS Optimizations Remove whitespaces Comments Remap colors shortest values Use Short hand notations much possible ex instead saying font size 26px font family Arial font weight bold say font bold 26px Arial c Javascript Optimizations ex A single line entire script Therefore normally two versions file One developer one end user need understand code Remove comments They useless end user Remove whitespaces Be careful character Perform code optimizations x x 1 replaced x You replace meaningful variables x etc using tool deliver user Remap built objects save space w window n navigator ap appname w n ap Netscape Minimise DOM access much Try store DOM elements variables Use external Javascripts The first download little slow But browser cache script requested subsequent pages use cached copy script Use need based script downloads OTHER POINTS 1 Zs Choose right format downloading data XML JSON Text If using images set src attribute required Merely setting src empty string also wastes call The following bad img src later incode youdo img sre http somesrvr img jpg 3 Try use GET method often Experiments shown POST actually two step process headers sent first body unlike GET takes ONE TCP packet The YAHOO Mail team found browsers except Firefox perform POST two step process headers sent first server responds 100 continue body sent browser Firefox performs POST one step 4 Effective use caching Predictive Fetch pattern needs implemented judiciously Can prefetch cache client server side b External Javascripts cached This slow first download execution browser cache downloaded JS subsequent page downloads use JS significantly faster JS files already browser c Use Expires header judiciously cache information But means browser arbitrarily choose persist data even expiry date Hence need use URL manipulating method force new fetch cached content The Expires header effective caching static data received AJAX Alternately use Cache control header http 1 1 This much better Expires header POST responses NOT cached spite Expires header set server Or matter Cache control header You MANUALLY cache POST responses e Manually cache wherever possible This way dependency browser much reduced cross browser issues eliminated Before make new requests check cached data browser memory use
SE,agile_tutorial.pdf,AGILE software development methods agile software development methodology build software incrementally using short terations 1 4 weeks development aligned changing business needs This simple tutorial uses appropriate examples help understand agile evelopment general quick way tutorial prepared beginners help understand basics Agile principles implementation After completing tutorial find moderate level expertise advance Before proceeding tutorial need basic knowledge software development concepts software requirements coding testing etc SIMPLY EARAYLEARANIANGwm I SIMPLY EARAYLEARANIANGwm I SIMPLY EARAYLEARANIANGwm I SIMPLY EARAYLEARANIANG1 AGILE PRIMER Define Software Traditional Method real feedback Final Software Agile Method wm I SIMPLY EARAYLEARANIANGwm I SIMPLY EARAYLEARANIANGCross functional Team 7 2 Members Developer Developer Developer Tester Tech lead Developer Product Owner Scrum Master inte rface User Story A User Story B User Story C Define Define 3 oO uejd Uoe1 a3 4 SIMPLY EARAYLEARANIANGwm I SIMPLY EARAYLEARANIANGwm I SIMPLY EARAYLEARANIANG
WT,wt-course-info.pdf,WEB TECHNOLOGIES Javascript Objects OO Concepts Prototype Inheritance Hidden Frames Technique GET Hidden Frames Technique POST Unit 1 Image based AJAX Dynamic Script loading 17 859 17 85 T1 Chapter 2 XMLHttpRequest GET 7 85 7 85 XMLHttpRequest POST Cross domain access CORS Maintaining history AJAX calls Fetching binary data XHR File Upload Predictive Fetch Predictive Fetch Multi Stage Download Multi Stage Download Unit 2 Periodic Refresh Fallback Patterns T1 Chapters 3 6 7 8 Periodic Refresh Fallback Patterns 21 42 39 27 T4 Submission Throttling Submission Throttling Submission Throttling Introduction XML Parsers Styling RSS Atom Feeds JSON XML JSON vs XML COMET HTTP Streaming Long Poll iFrames Technique Using XMLHttpRequest HTMLS Server Sent Events Overview COMET Frameworks Unit 3 T1 Chapters 9 T4 Web Sockets 21 42 60 69 Principles REST Handson REST based client Handson REST based service Architecture SOAP Based Services Hands SOAP Based Services SOAP vs REST Performance Considerations Timeouts Retries Handling Server Errors Multiple Requests The HTTP 1 1 Two Connection Limit Race Conditions Unit 4 Caching Client Side T3 Chapters 6 7 Compression Data 21 42 82 11 T4 Request Management HTTP 2 0 New Features HTTP 2 0 vs 1 1 Web Attack Surfaces Reconnaissance Review Various Vulnerabilities Precautions SQL Injection XSS XSTOverview Popular Frameworks Node js Basics Node js Callbacks Unit 5 Node js HTTP Responses 17 85 100 T2 Chapters 1 2 4 6 8 T4 Literature Publication Information Book Type Code Title Author Publisher Year Professional AJAX Nicholas C Zakas et al Wiley Publishing 2007 Text Book 12 Angular JS Up Running Shyam Sheshadri 1 O Reilly 2014 Brad Green Text Book T3 AJAX The complete reference Thomas A rc McGraw Hill 2008 Powell Hendany T4 Handouts Web Services Web Sockets ancours HTTP 2 0 protocol Node js
OOMD,oomd-course-info.pdf,Classes Unit 1 Introduction Use Cases Class Models Unit 2 Dynamic Models 12 Reference IT1 Modeling OO Themes Three models Introduction UML overview UML IA conceptual model UML Rules UML Common Mechanisms UML Architecture Use Case Models Class Modeling Class diagram Link Association Concepts model Object Constraint Language Advanced Class Modeling Application Case Stud Application Case Stud sample class Activity Models IBusiness Process Models Sequence Models IATM Case Study Application Class Interaction Models State Models Advanced State Models Nested State Diagrams Nested States Relationship Class State Models Application Case Stud Application Case Stud Unit 3 System Design Component System design Overview System Design Estimation performance Making Reuse plan IBreaking System Subsystems Identifying Concurrenc Handling Global Resources conditions Architectural styles Boundary B Tech 7th Semester Course Information ay Portion Covered Percentage 20 20 20 40 20 60 Class Design Overview Bridging Gap Realizing Use Cases Designing Algorithms Recursing Downward Refactoring Design Optimization Reification Behavior Organizing Class Design Examples Implementation Models Fine tuning Classes Generalizations Realizing Associations Testing Deployment Models Object Relational Mapping Database Design Abbreviated ATM Model Implementing Structure Functionality Unit 4 Object Oriented Desig GRASP Design Principles GRASP Design Principles Creator Information Expert Low Coupling Controller IHigh Cohesion Indirection Polymorphism Protected Variations Pure Fabrication SOLID Design Principles Single Responsibility Open Closed Liskov Substitution Interface Segregation Dependency Inversion Unit 5 OO Design Patterns What Design Patterns IHow Design Patterns Solve Problems IHow Select Design Pattern How implement Design Pattern Introduction widely used Design Patterns Creational Patterns Abstract Factory Builder Factory Method Prototype Structural Patterns Adapter Bridge Composite Decorator Facade Behavioral Patterns Interpreter Iterator Mediator Memento Observer state Strategy Template Method B Tech 7th Semester Course Information
SE,se-course-info.pdf,Book Type Code Author Title Publisher Textbook TL Object Oriented Modeling Design UML Michael R Blaha James R Rumbaugh 2nd Edition Reference T2_ Applying UML Patterns Craig Larman 3rd Edition The Unified Modeling Language User Guide Grady Reference TS IBooch James Rumbaugh Ivar Jacobson 2nd Edition Pearson Design Patterns Elements Reusable Object Oriented Reference T4 Software Erich Gamma Richard Helm Ralph Johnson Pearson ohn Vlissides Pearson Chapter Title Portion Covered Literature Unit 1 Introduction Software Engineering Understand context Software Engineering Contrasting System Development Product development Software products project engineering 12 Hours Generic Process framework Phases T1 Ch1 Ch development software Product life cycle 3 Phases roles product development product development eco system Introduction Software development models including waterfall model Incremental model Evolutionary model Agile model etc gineerin 10 Hours Requirements Engineering tasks Requirements T1 Ch 2 Ch documentation specification management 9 Ch 10 Requirements traceability System Modeling Analysis requirements different perspectives various modeling techniques B Tech 7th Semester Course InformationSoftware Project Product Management Planning software development project overview different aspects SE management process maturities Unit 3 Analysis Design Implementation Engineering Change Build management Software Architecture Software Architecture 14 Hours Software Life cycle Architecture Design T1 Ch 11 Architectural Views Architectural Styles The Ch 12 Unified Modeling Lan e References Design Implementation Engineering Internet Classical design Methods Object Oriented Sources analysis Design Methods Introduction Design patterns Service oriented architecture mplementation Coding standards guidelines code Review Peer Review Patching patch management Change Build Management Elements Configuration Management Systems Baselines Repository SCM process Configuration Management Plan Management code versions release versions Exposure code management tools Build Unit 4 Software Testing Software Testing Test Objectives Testing Software Life cycle Testing Strategies Verification Validation Planning Documentation Manual test Techniques 12 Hours Coverage Based Test Techniques Fault based T1 Ch 13 Ch test techniques Error Based Test Techniques 14 Comparison Test Techniques Test Stages Estimating Software Reliability Assignment Reviews presentation teams 6 students per team 20 min per team 4 Hours total required Unit 5 SW Quality Other Eng Topics B Tech 7th Semester Course InformationSoftware Quality Managing Software Quality 8 Hours A taxonomy Quality attributes perspectives 25 28 T1 Ch6 quality The quality system Software Quality assurance The Capability Maturity Model Personal Software Process Book Type Title Author Publication info Publisher Text Book TI Software Engineering Principles Practice 3rd Wiley India 2010 Hans van Vliet Ter Boak T2 Software Engineering A practitioner 6th McGraw 2005 approach Roger S Pressman Hill Reference Pearson R1 Software Engineering Ian Somerville 9th 2009 Contents Other Various Articles Papers Contents Internet IEEE SWEBOK Sources Chapter Portions Covered Title Reference Topics Covered Cumulative Literature Syllabus Javascript Objects OO Concepts Prototype Inheritance Hidden Frames Technique GET Hidden Frames Technique POST Unit 1 Image based AJAX Dynamic Script loading T1 Chapter2 XMLHttpRequest GET XMLHttpRequest POST Cross domain access CORS Maintaining history AJAX calls Fetching binary data XHR Unit 2 Predictive Fetch 21 42 39 27 T1 Chapters Predictive Fetch 3 6 7 8 T4 ulti Stage Download Multi Stage Download B Tech 7th Semester Course Information
WT,Comet.pdf,javascript rg28 Comet Programming Using Ajax Simulate Server Push Not data governance hurt business Download eBook learn take control Comet Programming Using Ajax Simulate Server Push By Rob Gravelle Gt Comet Web application model enables web servers send data client without explicitly request Developers utilize Comet techniques create event driven Web apps Comet next actually umbrella term multiple techniques achieving client server interaction All methods common rely browser native technologies JavaScript rather proprietary plug ins This article examine one method implementing Comet called Ajax Long Polling demonstrate used refresh page components keep cached data synch server Older Models Refreshing Browser Content In early days World Wide Web browser would make multiple server requests one page content one page component Examples page components include images CSS files scripts Java applets server hosted resource referenced page Downloading page chunks data known page page model One main drawbacks early model easily refresh one page element JavaScript allowed image swapping setting src property image cases browser would refresh entire page Even always work intended browser server caching could cause element display subsequent requests Ajax asynchronous JavaScript XML went long way towards eliminating limitations It allowed far greater control page content providing ability send server requests little much data browser needed update In addition asynchronous nature supported multiple simultaneous calls even elements downloaded One problem Ajax adequately solve issue data synchronization client server Since browser would know something changed server Web applications typically polled server periodic basis ask new information available Although better whole page refreshes high polling frequencies could still waste server resources bandwidth 4 The Challenges Cloud Integration Download Now In 1995 Netscape Navigator added feature called server push Taking advantage server side programming content type multipart x mixed replace feature MIME standard allowed servers send newversions image HTML page browser part multipart HTTP response Since 2004 Gecko based browsers Firefox accept multipart responses XHR well On server side component encoded separate portion multipart response client callback function provided XHR onreadystatechange function called component arrived Unfortunately functionality included Gecko based browsers Comet Techniques Overview Comet techniques come two flavors streaming long polling In Web application using streaming Comet browser opens single persistent connection server Comet events handles incrementally browser side Specific examples streaming Comet techniques include Hidden IFrame XMLHttpRequest Server Push In long polling client makes Ajax request server kept open server new data send browser Upon receiving server response browser initiates new long polling request order obtain next data set Long polling achieved using either Ajax script tag techniques Comet streaming techniques considered somewhat inferior long polling several reasons The Hidden IFrame technique two major flaws lack reliable way handle errors impossibility tracking state request calling process The XMLHttpRequest Server Push technique even limited applicability works Gecko based browsers Long polling hand easier implement browser side works every browser supports JavaScript Ajax Implementing Long Polling Comet quite useful applications data needs synchronized server client In Building Ajax Caching Manager article storing data client side order minimize redundant server calls The danger cached data may become stale client way knowing whether data changed server Traditionally solution would poll server periodic basis ask whether data modified Unfortunately increases network traffic reason implementing caching first place Long polling would decrease server calls connection stays open server update announce Chat apps phpFreeChat ideal candidates long polling written using non proprietary technologies main tenant Comet require frequent updating Other prime candidates long polling include e merchant sites need keep prices product availability date The latter going construct using Ajax long polling The CD Sales Page website sells alter ego latest single cover The Police classic Synchronicity II song Unlike bona fide geek conservative professional Rob Gravelle Guitar Hero need video game conquer intricate rhythms blazing solos The main HTML page contain INPUT field select number copies purchase button send order Beneath FORM message display number CDs left stock We use long polling keep number date Here HTML code view plain print html head title CD Sales Page title meta http equiv Content Type content text html charset iso 8859 1 script language JavaScript src prototype js ABWN
